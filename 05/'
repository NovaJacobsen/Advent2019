$LOAD_PATH.unshift(File.expand_path("..", __FILE__))

require 'opcode'

module Star05
  class Computer

    attr_accessor :program, :input, :output

    def initialize(*program, input: [], output: [])
      @original_program = program
      @input = input
      @output = output
      reset
    end

    def run
      until opcode === Abort.new do
        case opcode
        when Add
          a = read operand(1)
          b = read operand(2)
          write(a+b, to: operand(3))
          @pc += 4
        when Mul
          a = read operand(1)
          b = read operand(2)
          write(a*b, to: operand(3))
          @pc += 4
        when Read
          write(@input.pop, to: operand(1))
          @pc += 2
        when Write
          a = read operand(1)
          @output.push a
          @pc += 2
        else
          raise "invalid opcode: #{opcode.inspect}"
        end
      end
      self
    end

    def opcode
      Opcode.for(@program[@pc])
    end

    def operand(number)
      read(@pc+number)
    end

    def read(index)
      @program[index]
    end

    def write(value, to:)
      @program[to] = value
    end

    def reset
      @program = @original_program.dup
      @pc = 0
      self
    end

  end
end
